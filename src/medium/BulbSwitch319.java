package medium;
//初始时有n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
//        第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个
//        灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
//        找出并返回 n轮后有多少个亮着的灯泡。


/**
 * @author wy
 * @date 2021/11/15 9:28
 */
public class BulbSwitch319 {
    /**
     * 如果我们将所有的灯泡从左到右依次编号为 1, 2, ⋯,n，那么可以发现：
     * 在第 i轮时，我们会将所有编号为 i的倍数的灯泡进行切换。
     * 因此，对于第 k个灯泡，它被切换的次数恰好就是 k的约数个数。如果 kk 有偶数个约数，
     * 那么最终第 k个灯泡的状态为暗；如果 k有奇数个约数，那么最终第 k个灯泡的状态为亮。
     * 对于 k而言，如果它有约数 x，那么一定有约数k/x。因此只要当 x^2/k时，约数都是
     * 「成对」出现的。这就说明，只有当 k是「完全平方数」时，它才会有奇数个约数，否则一定有偶数个约数。
     * 因此我们只需要找出 1, 2, ⋯,n 中的完全平方数的个数即可，答案即为根号n向下取整。
     * @param n
     * @return
     */
    public int bulbSwitch(int n){
        return (int) Math.sqrt(n + 0.5);
    }
}
