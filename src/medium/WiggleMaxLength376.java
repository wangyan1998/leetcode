package medium;
//如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。
//        少于两个元素的序列也是摆动序列。
//        例如，[1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3)是正负交替出现的。
//        相反, [1,4,7,2,5]和[1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。
//        给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，
//        剩下的元素保持其原始顺序。

public class WiggleMaxLength376 {
    /*
    贪心算法：只关注当前元素和上一个元素的大小，也有点类似动态规划，不过只是用两个变量记录当前元素以前的摆动序列的长度，并实时更新。
     */
    public int wiggleMaxLength(int[] nums){
       int down=1,up=1;
       for(int i=1;i<nums.length;i++){
           if(nums[i]>nums[i-1]){
               up=down+1;//如果持续上升，因为每次down都不变，所以持续上升的元素只会计算一次波谷
           }else if(nums[i]<nums[i-1]){
               down=up+1;//如果持续下降，因为每次up都不变，所以持续下降的元素只会计算一次波峰
           }
       }
       return nums.length==0?0:Math.max(down,up);
    }
}
