package hard;
//黑板上写着一个非负整数数组 nums[i] 。Alice 和 Bob 轮流从黑板上擦掉一个数字，Alice 先手。如果擦除一个数字后，
//        剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。(另外，如果只剩一个数字，
//        按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为0。）
//        换种说法就是，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。
//        假设两个玩家每步都使用最优解，当且仅当 Alice 获胜时返回 true。


/**
 * @author wy
 * @date 2021/5/22 9:27
 */
public class XorGame810 {
    /**
     * 数学推导法：如果当前黑板上所有数字异或结果等于0，则当前玩家获胜，由于Alice是先手，因此如果初始时黑板上所有数字异或结果等于0，则
     * Alice获胜。
     * 然后讨论黑板上数字异或结果不等于0的情况。因为两个人交替擦除数字，且每次都恰好擦除一个数字，因此对于这两个人中的任意一个，其每次在擦出
     * 数字前，黑板上剩余数字的个数的就行都一定是相同的。
     * 这启发我们从数组的长度的奇偶性来讨论问题。
     * @param nums
     * @return
     */
    public boolean xorGame(int[] nums){
        if (nums.length % 2 == 0) {
            return true;
        }
        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        return xor == 0;
    }
}
